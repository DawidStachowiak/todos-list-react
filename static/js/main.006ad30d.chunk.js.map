{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newtaskContent","setNewTaskContent","className","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","required","Tasks","tasks","hideTasksDone","removeTask","toglleTaskDone","map","task","done","onClick","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHidetasksDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.006ad30d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n  const [newtaskContent, setNewTaskContent] = useState(\"\");\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (newtaskContent.trim() === \"\") {\r\n      return;\r\n    }\r\n    addNewTask(newtaskContent.trim());\r\n    setNewTaskContent(\"\");\r\n  };\r\n  return (\r\n    <form className=\"form\" onSubmit={onFormSubmit}>\r\n      <input\r\n        value={newtaskContent}\r\n        className=\"form__input js-new__task\"\r\n        placeholder=\"Co jest do zrobienia?\"\r\n        onChange={(event) => setNewTaskContent(event.target.value)}\r\n        required\r\n      />\r\n      <button className=\"form__button \">Dodaj zadanie</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideTasksDone, removeTask, toglleTaskDone }) => (\r\n  <ul className=\"section__list\">\r\n    {tasks.map((task) => (\r\n      <li\r\n        key={task.id}\r\n        className={`list__item ${task.done && hideTasksDone ? \"list__item--hide\" : \"\"\r\n          }`}\r\n      >\r\n        <button\r\n          onClick={() => toglleTaskDone(task.id)}\r\n          className=\"done__button js-done__button\"\r\n        >\r\n          {task.done ? \"✔\" : \"\"}\r\n        </button>\r\n        <span\r\n          className={`taskList__span ${task.done ? \"taskList__span--done\" : \"\"\r\n            }`}\r\n        >\r\n          {task.content}\r\n        </span>\r\n        <button onClick={() => removeTask(task.id)} className=\"remove__button\">&#128465;</button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;\r\n","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideTasksDone, toggleHideDone, setAllDone }) => {\r\n  if (!tasks.length) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"buttons\">\r\n      <button onClick={toggleHideDone} className=\"buttons__button\">\r\n        {hideTasksDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n      </button>\r\n      <button\r\n        onClick={setAllDone}\r\n        className=\"buttons__button \"\r\n        disabled={tasks.every(({ done }) => done)}\r\n      >\r\n        Ukończ wszystkie\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import \"./style.css\";\n\nconst Section = ({ title, body, extraHeaderContent }) => (\n  <div className=\"section\">\n    <div className=\"section__item\">\n      <h2 className=\"section__header\">{title}</h2>\n      {extraHeaderContent}\n    </div>\n    {body}\n  </div>\n);\n\nexport default Section;\n","const Header = ({ title }) => (\n  <header>\n    <h1>{title}</h1>\n  </header>\n);\nexport default Header;\n","import \"./style.css\";\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\n\nexport default Container;\n","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [hideTasksDone, setHidetasksDone] = useState(false);\n  const [tasks, setTasks] = useState(\n    JSON.parse(localStorage.getItem(\"tasks\")) || []\n  );\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  const toggleHideDone = () => {\n    setHidetasksDone((hideTasksDone) => !hideTasksDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks((tasks) => tasks.filter((task) => task.id !== id));\n  };\n\n  const toglleTaskDone = (id) => {\n    setTasks((tasks) =>\n      tasks.map((task) => {\n        if (task.id === id) {\n          return { ...task, done: !task.done };\n        }\n        return task;\n      })\n    );\n  };\n\n  const setAllDone = () => {\n    setTasks((tasks) => tasks.map((task) => ({ ...task, done: true })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks((tasks) => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n      },\n    ]);\n  };\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideTasksDone={hideTasksDone}\n            removeTask={removeTask}\n            toglleTaskDone={toglleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideTasksDone={hideTasksDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}